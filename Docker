EXPLICAÇÕES BÁSICAS 

CGROUP
  Isolamento de CPU e memória.

NAMESPACE
  Isolamento de disco, network, usuários, processos, etc.

________________________________________________________________________________________________________________________________________________________________________________

PRÉ INSTALAÇÃO

Ativação e instalação do WSL
  - Adicionar recursos do Windows: Subsistema Linux para Windows e Hyper-V
  - Buscar e aplicar atualizações do Windows Update se necessário (utilizar a opção "Verificar on-line se há atualizações do Microsoft Update")

Instalar pela Microsoft Store (em sequência):
  - Windows Subsystem for Linux
  - Ubuntu

Atualizar o wsl para a versão 2 no Powershell:
  - wsl --update

Preparação do Sistema Linux
  - Faça o download dos certificados disponíveis em http://sti.tjms.jus.br/confluence/x/soI2C e coloque-os no diretório '/usr/local/share/ca-certificates/'
  - Abra um terminal do Ubuntu e execute:

	sudo update-ca-certificates
	sudo apt-get update
	sudo apt-get install ca-certificates curl gnupg
	sudo install -m 0755 -d /etc/apt/keyrings

Verificar se o systemd está instalado no Ubuntu 
  - systemctl

Utilizado para adicionar a key para acesso ao repositório docker
  - cat gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

Limpeza de tela inicial
  - touch ~/.hushlogin

________________________________________________________________________________________________________________________________________________________________________________

INSTALAÇÃO COMANDANDOS DOCKER

Exercutar um container (docker run), no modo daemon/blackground (-d), atrelar porta da aplicação com a do host(-p)", nome da imagem a ser baixada do Docker hub que é o repositório padrão (getting-start)
  - docker run -d - p docker/getting-start

Listar os containers dockers:
  - docker container ls  ou docker ps

Listar os logs, de maneira mais estática (-f):
  - docker logs ls -f ou  docker container logs -f "nome do contaienr"

Listar container estão e não estão em execução:
  - docker container ls -a ou docker ps -a

Outros comandos interessantes:
  - sudo service docker status
  - docker stop "CONTAINER ID"
  - docker start "CNTAINER ID"
  - docker rm "CONTAINER ID"

____________________________________________________

ADENTRAR AO CONTAINER

Docker container exec -it
  - acessar o bash dentro do container com interatividade e terminal

____________________________________________________

INSTALANDO UMA APLICAÇÃO DO GITHUB

  - git clone https://github.com/docker/getting-started-app.git

____________________________________________________

MONTANDO A IMAGEM

cd docker/getting-started-app/
docker image inspect getting-started:latest

Ignorando o certificado hhtps/ssl do YARN na hora da montagem:
  - yarn config set "strict-ssl" false -g
  - npm config set "strict-ssl" false -g

Para conferir a imagem criada e as outras já existentes:
  - docker image ls ou docker images
____________________________________________________

COMPARTILHANDO IMAGES

Crie uma conta no hub.docker.com

Crie um token em /Account Settings/News Acsess Token

  - docker login -u rodrigorgomes
"Logue no hub.docker.com"

Access Token
  - dckr_pat_HYiGlOkedbivCCBjpnns_kfIHBs

  - docker image tag getting-started:latest rodrigorgomes/getting-started:lastet
adicione o nome do seu repositorio na frente do nome da imagem

  - docker push rodrigorgomes/getting-started:lastet
"Upgrade da imagem para o seu docker hub

  - docker rm --forced "nome da imagem"

  - docker run -d -p 3000:3000 rodrigorgomes/getting-started:lastet
"usuário/nome da imagem"
"obs: usuário tem que ser o mesmo do docker hub"
____________________________________________________

VOLUMES

  - docker container logs -f "container name"
Mostrar onde está sendo salva a base de dados desse container em /etc/todos/todo.db:

Utilize para entrar no container:
  -  docker exec -ti "IDCONTAINER" /sh

Aqui dentro vai estar a base dos dados: todo.db
  - cd /etc/todos
"obs: Se o container morrer, essa base vai morrer junto."

Criar uma database de container na máquina host:
  - docker volume create todo-db

Mostrar o volume/database de container:
  - docker volume ls

Mostra o caminho está esse volume/criado:
  - docker voluma inspect todo-db "(database/volume name)"

"obs: inspect é como se fosse o ls dentro do volume/datebase" 

Ordenando que baixe essa imagem e ative esse como container, salvando sempre a base de dados em /etc/todos: 
  - docker run -d -p 3000:3000 -v todo-db:/etc/todos/ rodrigorgomes/getting-started:lastet

Utilize pra descobrir como excluir, entre outras opções para volume:
  - docker volume --help
____________________________________________________

NETWORK

docker netwokr --help
docker network created
docker network ls

docker rm --force "nome do container"

docker run -d -p 3000:3000 -v todo-db:/etc/todos/ -- network todo-app -e rodrigorgomes/getting-started:lastet
(baixando o container, trazendo o nome da minha network e o local da database no host)

"Outra opção mais completa pra se testar, trazendo o mysql, network e o local do database no host:"

docker network --help
docker network create "nome que deseja para network" (todo-app)
docker network ls

Criando um docker com o MYSQL dentro, já definindo a senha para root e conectando ao NETWORK criado
  - docker run -d -v mysql-todo-db:/var/lib/mysql --network todo-app -e MYSQL_ROOT_PASSWORD=rodrigo -e MYSQL_DATABASE=todos mysql:5.7

Entrando dentro do docker onde tem o mysql
  - docker exec -it IDDOCKER mysql -u root -p

docker run -it --network  todo-app nicolaka/netshoot

dig mysql

Criando um docker com o MYSQL dentro, já definindo a senha para root e conectando ao NETWORK criado com apelido de mysql"
  - docker run -d -v mysql-todo-db:/var/lib/mysql --network todo-app --network-alias mysql -e MYSQL_ROOT_PASSWORD=rodrigo -e MYSQL_DATABASE=todos mysql:5.7

docker run -it --network  todo-app nicolaka/netshoot
____________________________________________________

OUTROS COMANDOS
history | grep -i "digite a palavra a ser buscada no history"
________________________________________________________________

####################### Comandos Docker #######################

Segue a lista com os principais comandos utilizados durante o curso:

Comandos relacionados às informações
docker version - exibe a versão do docker que está instalada.
docker inspect ID_CONTAINER - retorna diversas informações sobre o container.
docker ps - exibe todos os containers em execução no momento.
docker ps -a - exibe todos os containers, independentemente de estarem em execução ou não.
Comandos relacionados à execução
docker run NOME_DA_IMAGEM - cria um container com a respectiva imagem passada como parâmetro.
docker run -it NOME_DA_IMAGEM - conecta o terminal que estamos utilizando com o do container.
docker run -d -P --name NOME dockersamples/static-site - ao executar, dá um nome ao container e define uma porta aleatória.
docker run -d -p 12345:80 dockersamples/static-site - define uma porta específica para ser atribuída à porta 80 do container, neste caso 12345.
docker run -v "CAMINHO_VOLUME" NOME_DA_IMAGEM - cria um volume no respectivo caminho do container.
docker run -it --name NOME_CONTAINER --network NOME_DA_REDE NOME_IMAGEM - cria um container especificando seu nome e qual rede deverá ser usada.
Comandos relacionados à inicialização/interrupção
docker start ID_CONTAINER - inicia o container com id em questão.
docker start -a -i ID_CONTAINER - inicia o container com id em questão e integra os terminais, além de permitir interação entre ambos.
docker stop ID_CONTAINER - interrompe o container com id em questão.
Comandos relacionados à remoção
docker rm ID_CONTAINER - remove o container com id em questão.
docker container prune - remove todos os containers que estão parados.
docker rmi NOME_DA_IMAGEM - remove a imagem passada como parâmetro.
Comandos relacionados à construção de Dockerfile
docker build -f Dockerfile - cria uma imagem a partir de um Dockerfile.
docker build -f Dockerfile -t NOME_USUARIO/NOME_IMAGEM - constrói e nomeia uma imagem não-oficial.
docker build -f Dockerfile -t NOME_USUARIO/NOME_IMAGEM CAMINHO_DOCKERFILE - constrói e nomeia uma imagem não-oficial informando o caminho para o Dockerfile.
Comandos relacionados ao Docker Hub
docker login - inicia o processo de login no Docker Hub.
docker push NOME_USUARIO/NOME_IMAGEM - envia a imagem criada para o Docker Hub.
docker pull NOME_USUARIO/NOME_IMAGEM - baixa a imagem desejada do Docker Hub.
Comandos relacionados à rede

hostname -i - mostra o ip atribuído ao container pelo docker (funciona apenas dentro do container).
docker network create --driver bridge NOME_DA_REDE - cria uma rede especificando o driver desejado.
Comandos relacionados ao docker-compose

docker-compose build - Realiza o build dos serviços relacionados ao arquivo docker-compose.yml, assim como verifica a sua sintaxe.
docker-compose up - Sobe todos os containers relacionados ao docker-compose, desde que o build já tenha sido executado.
docker-compose down - Para todos os serviços em execução que estejam relacionados ao arquivo docker-compose.yml.
