####################### Comandos Openshift #######################

#Lista de Projetos:
oc project

#bashCopy code
oc get projects

#Mudar para um Projeto Específico:
oc project NOME_DO_PROJETO 

#Listar todos os Objetos no Projeto Atual:
oc get all 

#Verificar Status dos Pods:
oc get pods 

#Verificar Configurações do Projeto:
oc describe project NOME_DO_PROJETO 

#Listar Serviços no Projeto Atual:
oc get services 

#Ver Detalhes de um Objeto Específico (por exemplo, Deployment):
oc describe deployment NOME_DO_DEPLOYMENT

#Imprimir todos os pods qque estão com estados diferentes de Running ou Completed
kubectl get pods --all-namespaces -o wide | grep -v "Running\|Completed"
ocget pods --all-namespaces -o wide | grep -v "Running\|Completed"

#imprimir todos os pvc existentes no cluster e sua capacida total de armazenamento.
oc get pvc --all-namespaces -o=custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,CAPACIDADE_TOTAL:.status.capacity.storage

#Auto completar com os comando oc e kuberctl, além de dar um apelido para o kubectl.
nano .bash rc

#Acessar um projeto específico
oc project <nameproject>
kubectlproject <nameproject>


#Listar todos os projetos
oc projects <nameproject>
kubectl project <nameproject>


#Deletar um projeto específico
oc delete project <nome_do_projeto>

#Listar pods do projecto em que se está
oc get pod
kubectl oc get pod


#Traz o detalhe de Ip,node, nominated node, readiness gates
oc get pod -o wide
kubectl oc get pod -o wide

#Listando todos os pods de um node específico.
oc get pods --all-namespaces --field-selector spec.nodeName=ocp-6d49v-worker-prd-2qd9j

oc describe pod <nomedopod>

#Traz informações de dos pods relacionados ao projeto que você está dentro: Namespace (nome do project), Name (nome do pod), CPU, Memory.
oc adm top pod <nomedopod>

#Traz informações de todos os pods do cluster: Namespace (nome do project), Name (nome do pod), CPU, Memory.
oc adm top pod <nomedopod> -A

#Traz as métricas de CPU e memória de todos os pods em um nó específico,
oc top pod --all-namespaces --field-selector spec.nodeName=<nomedonode>
oc get pods -A -o wide | grep -<nomedonode>

#Verificando todos os nodes do projeto em que você está
oc get nodes
kubectl get nodes

#Verificando todos os jobs rodando em todos os projetos
oc get nodes --all-namespaces
kubectl get nodes --all-namespaces

#Fornece informações detalhadas sobre um node específico do cluster, incluindo seu status, função, tempo de atividade, versões de Kubernetes e CRI-O, entre outras informações.
oc get nodes -A -o wide | grep -<nomedonode>

#obter informações em tempo real sobre o uso de recursos de um node específico do cluster
oc adm top node <nomedonode>

#obter informações em tempo real sobre o uso de recursos dos nós (nodes) no cluster
oc adm top nodes
kubectl top nodes

#obter informações detalhadas, como quais pods estão dentro.
oc describe nodes <nomedonode>

# Verificar todos os processos que estão ocorrendo do projeto que está dentro
oc get jobs
kubectl get jobs

# Verificar todos os processos que estão ocorrendo de todos os projetos
oc get jobs -A
kubectl get jobs -A

#Somente tratá informações detalhadas sobre um job específico no cluster, caso você esteja dentro do projeto referente ao job.
oc describe job <nomedojob>
kubectl describe job <nomedojob

#Tratá informações detalhadas sobre um job específico no cluster, não importando dentro de qual projeto você está. O que torna isso possível é: " -n <nomedoprojeto>
oc describe job <nomedojob> -n <nomedoprojet ou namespace)
kubectl describe job <nomedojob> -n <nomedoprojet ou namespace)

#Status da implantação/atualização do <aproximandovidas> no seu cluster 
#Verifica o status do Deployment "aproximandovidas". O comando examina se há alguma alteração em andamento, se os pods estão sendo atualizados, ou se há algum problema durante o processo de implantação. Isso é útil para monitorar o progresso da implantação e identificar possíveis problemas.
oc rollout status deployment aproximandovidas
kubectl rollout status deployment aproximandovidas

#Acessando um terminal de um pod a partir do seu terminal local
oc exec -it <nome_do_pod> -- /bin/bash

#Após estar dentro do terminal do pod,  este comando verifica as informações de espaço em disco disponível no sistema. 
df -h

#Verificar os pontos de montagem (provável não funcionar dentro do pod)
mount -l

#Verificar os logs de um container específico.  É útil para monitorar as saídas do seu aplicativo ou serviço em execução no cluster OpenShift enquanto ele está em execução. O uso da opção -f é especialmente útil para observar os logs em tempo real à medida que novos registros são gerados.
oc logs -f -c <nomedoconta 

#Escalar o recurso do machineset,  para o cluster criar mais nodes. 
# https://docs.openshift.com/container-platform/4.12/machine_management/manually-scaling-machineset.html
console web →  Compute -> MachineSet -> "O MachineSet referente".  
Pode ser feito pelo cli oc scale --replicas="qt de replicas" machineset <machineset> -n openshift-machine-api

#Listar todos os projetos onde já existe o hpa no deployment do mesmo.
#HPA: Auto replica pods de acordo com as requisições que vão consumindo a memória  e ou CPU (Regra de auto réplica quando consumido 75% de um desses recursos) do POD. 
oc get hpa --all-namespaces

#Listar HPAs em uma namespace específica
oc get hpa -n minha-namespace

#Listar detalhes específicos de um HPA em uma determinada namespace, use:
oc get hpa <nome-do-hpa> -n <sua-namespace>

#Acessando o shell do container que está em execução no cluster OpenShift
oc rsh <nome_pod>

#Copiar arquivos do seu host local para um contêiner em execução
oc cp <nome_do_arquivo_local> <nome_pod>:</caminho/no/contêiner>

#copiar todo um diretório local para um contêiner em execução
oc rsync <diretório_local> <nome_pod>:</caminho/no/contêiner>














































