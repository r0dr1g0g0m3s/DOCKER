Exemplo de arquivo YAML:



apiVersion: autoscaling.openshift.io/v1
kind: MachineAutoscaler
metadata:
  name: example-machine-autoscaler
  namespace: your-namespace
spec:
  scaleTargetRef:
    apiVersion: machine.openshift.io/v1beta1
    kind: MachineSet
    name: your-machineset
  minReplicas: 1
  maxReplicas: 5



Substitua example-machine-autoscaler, your-namespace, e your-machineset pelos valores adequados para o seu ambiente.



oc apply -f seu-arquivo.yaml



II - EM GUI:







apiVersion: autoscaling.openshift.io/v1
kind: MachineAutoscaler
metadata:
  name: example-machine-autoscaler
  namespace: your-namespace
spec:
  scaleTargetRef:
    apiVersion: machine.openshift.io/v1beta1
    kind: MachineSet
    name: your-machineset
  minReplicas: 1
  maxReplicas: 5



Substitua example-machine-autoscaler, your-namespace, e your-machineset pelos valores adequados para o seu ambiente.



Depois, vá no CLI e execute:

oc apply -f seu-arquivo.yaml

b) Configurar o MachineAutoscaler para um node Específico:
Se você deseja configurar o MachineAutoscaler para ajustar dinamicamente apenas um nó específico, isso pode depender da implementação exata do MachineAutoscaler no seu ambiente.

Geralmente, o MachineAutoscaler opera em conjuntos de máquinas (MachineSet). Se você deseja controlar o dimensionamento de um nó específico, pode ser necessário criar MachineSets separados para cada nó.

Se a sua necessidade é específica de um único nó, e não para ajuste dinâmico com base em métricas, pode ser mais apropriado configurar manualmente o número de réplicas do MachineSet associado ao nó desejado, sem depender do MachineAutoscaler para ajustar dinamicamente.

A configuração exata pode variar com base na sua versão específica do OpenShift e na implementação do MachineAutoscaler no seu ambiente. Consulte a documentação oficial do OpenShift e, se possível, a documentação específica do seu provedor de infraestrutura ou operador de máquinas.



2.  Gerenciar a escalabilidade horizontal dos pods e distribuir a carga entre os nodes
Se você deseja replicar pods de um nó para outro quando o nó está sobrecarregado e, em seguida, remover esses pods do nó sobrecarregado, isso é mais relacionado ao comportamento do Kubernetes em relação ao balanceamento de carga e não diretamente ao MachineAutoscaler.

Para essa finalidade, o Kubernetes possui mecanismos como o Horizontal Pod Autoscaler (HPA) e o Cluster Autoscaler que podem trabalhar em conjunto para gerenciar a escalabilidade horizontal dos pods e distribuir a carga entre os nodes. Aqui estão os passos básicos que você pode seguir:

a) Horizontal Pod Autoscaler (HPA):
Configure um HPA para o Deployment ou ReplicationController dos seus pods. O HPA monitorará as métricas, como CPU, e ajustará o número de réplicas dos pods conforme necessário.
Exemplo de um HPA para um Deployment:



apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: example-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: example-deployment
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80



Substitua example-hpa e example-deployment pelos nomes apropriados para o seu ambiente.
b. Cluster Autoscaler:
Certifique-se de que o Cluster Autoscaler está configurado no seu cluster OpenShift. O Cluster Autoscaler é responsável por ajustar dinamicamente o número de nodes no cluster.
O Cluster Autoscaler adicionará ou removerá nodes conforme necessário para atender à demanda de carga de trabalho. Isso ajudará a distribuir os pods entre os nodes de forma eficiente.

c. Afinidade e Anti-Afinidade:
Considere o uso de regras de afinidade e anti-afinidade no seu Deployment. Isso pode ajudar a influenciar a distribuição de pods em diferentes nodes, mantendo-os juntos ou afastando-os, conforme necessário.
Exemplo de afinidade anti-pod em um Deployment:



affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: app
          operator: In
          values:
          - example-app
      topologyKey: "kubernetes.io/hostname"



Substitua example-app pelo rótulo apropriado para seus pods.



Com essas configurações, quando o HPA aumentar o número de réplicas de pods, o Cluster Autoscaler poderá adicionar novos nodes se necessário. Além disso, as regras de afinidade e anti-afinidade podem influenciar onde os novos pods serão programados.
